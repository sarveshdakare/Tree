#include<iostream>
#include<queue>
using namespace std;

class node {
    public:
        int data;
        node* left;
        node* right;

    node(int d) {
        this -> data = d;
        this -> left = NULL;
        this -> right = NULL;
    }
};

node* buildTree(node* root) {

    cout << "Enter the data: " << endl;
    int data;
    cin >> data;
    root = new node(data);    

    if(data == -1) {
        return NULL;
    }

    cout << "Enter data for inserting in left of " << data << endl;
    root->left = buildTree(root->left);
    cout << "Enter data for inserting in right of " << data << endl;
    root->right = buildTree(root->right);
    return root;

}

void levelOrderTraversal(node *root){
    queue<node*>q;
    q.push(root);
    
    while(!q.empty()){
        node *temp=q.front();
        cout<<temp->data<<" ";
        q.pop();
        
        if(temp->left){
            q.push(temp->left);
        }
        
         if(temp->right){
            q.push(temp->right);
        }
        
    }
}
void buildfromlevelorder(node* &root){
    queue<node*>q;
    cout<<"Enter the data for root "<<endl;
    int data;
    cin>>data;
    root=new node(data);
    
    q.push(root);
    
    while(!q.empty()){
        node *temp=q.front();
        q.pop();
        
        cout<<"Enter the leftnode:"<<endl;
        int leftdata;
        cin>>leftdata;
        
        if(leftdata!=-1){
            temp->left=new node(leftdata);
            q.push(temp->left);
        }
        cout<<"Enter the rightnode:"<<endl;
        int rightdata;
        cin>>rightdata;
        
        if(rightdata!=-1){
            temp->right=new node(rightdata);
            q.push(temp->right);
        }
    }
}


int main() {

    node* root = NULL;

   
    // root = buildTree(root);
    buildfromlevelorder(root);
    
    
cout<<"level order traversal:"<<endl;
   levelOrderTraversal(root);


    return 0;
}
